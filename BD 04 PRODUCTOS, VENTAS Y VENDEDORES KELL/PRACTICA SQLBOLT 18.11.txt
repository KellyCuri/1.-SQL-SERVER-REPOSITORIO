------- PRACTICE SQLBOLT ------
page: https://sqlbolt.com/lesson/select_queries_with_expressions

8.1) Find the name and role of all employees 
who have not been assigned to a building ✓

SELECT a.Name, a.Role, b.Building_name
from Employees a
left outer join Buildings b on a.Building=b.Building_name
where b.Building_name is NULL

8.2) Find the names of the buildings that hold no employees
SELECT b.Name, b.Role, a.Building_name
from Buildings a 
left outer join Employees b on a.Building_name=b.Building
where b.Name is NULL


9.1) List all movies and their combined sales in millions of dollars
SELECT a.Title, (b.Domestic_sales + b.International_sales) / 1000000 AS 'Million'
FROM Movies a
JOIN Boxoffice b ON a.Id = b.Movie_id;


9.2) List all movies and their ratings in percent
SELECT title, rating * 10 AS rating_percent
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;

9.3) List all movies that were released on even number years ✓
SELECT a.Title, a.Year
FROM Movies a
JOIN Boxoffice b ON a.Id = b.Movie_id
WHERE YEAR % 2 = 0;

10.1) For each role, find the average number of years employed by employees in that role 
SELECT Role, avg(Years_employed) as Promedio_años
from employees
group by Role


10.2) Find the total number of employee years worked in each building
SELECT building, sum(Years_employed) as Total_Años
from employees
group by building


11.1) Find the number of Artists in the studio (without a HAVING clause) ✓
SELECT role, count(Role) FROM employees
WHERE Role ="Artist"
Group by Role


11.2) Find the number of Employees of each role in the studio
SELECT role, count(Role) FROM employees
Group by Role

11.3) Find the total number of years employed by all Engineers 
SELECT role, sum(Years_employed) as Total_Años
FROM employees
Where Role="Engineer"
Group by Role

12.1) Find the number of movies each director has directed
SELECT Director, count(Titlle) as Numero:pelicula FROM movies
group by Director

12.2) Find the total domestic and international sales that can be attributed to each director
select a.Director, sum(b.Domestic_sales + b.International_sales) as Total_acomulado
FROM Movies a
JOIN Boxoffice b ON a.Id = b.Movie_id
Group by director

13.1) Add the studio's new production, Toy Story 4 to the list of movies (you can use any director) ✓


13.2) Toy Story 4 has been released to critical acclaim! It had a rating of 8.7, and made 340 million domestically and 270 million internationally. Add the record to the BoxOffice table.



14.1) The director for A Bug's Life is incorrect, it was actually directed by John Lasseter
UPDATE movies
SET director = "John Lasseter"
WHERE id = 2;

14.2) The year that Toy Story 2 was released is incorrect, it was actually released in 1999
UPDATE Movies
set 
Year=1999
Where Id=3

14.3) Both the title and director for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich
UPDATE movies
SET title = "Toy Story 3", 
director = "Lee Unkrich"
WHERE id = 11;


15.1) This database is getting too big, lets remove all movies that were RELEASED before 2005.
delete from Movies
Where year<2005

15.3) Andrew Stanton has also left the studio, so please REMOVE all movies directed by him. ✓
delete from Movies
Where Director="Andrew Stanton"

16) Create a new table named Database with the following columns:
– Name A string (text) describing the name of the database
– Version A number (floating point) of the latest version of this database
– Download_count An integer count of the number of times this database was downloaded
This table has no constraints.

CREATE TABLE Database(
    Name TEXT,
    Version floaT,
    Download_count INTEGER
    );

17) Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in.
ALTER TABLE Movies
ADD Aspect_ratio Float
